{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Trabajo final LC POS-Tagging. Curso 2020-2021\n",
    "### Jaime Ferrando Huertas\n",
    "### Javier Mart√≠nez Bernia"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Preparamos los datos"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[nltk_data] Downloading package cess_esp to /Users/jaime/nltk_data...\n",
      "[nltk_data]   Package cess_esp is already up-to-date!\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#IMPORTS\n",
    "import nltk\n",
    "from nltk.corpus import cess_esp\n",
    "from nltk.tag import UnigramTagger,BigramTagger,hmm, tnt, AffixTagger,brill, brill_trainer, crf, perceptron\n",
    "from sklearn.model_selection import KFold\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import math\n",
    "from random import shuffle\n",
    "\n",
    "nltk.download('cess_esp')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "number of sentnces: 6030\n",
      "number of words: 6030\n"
     ]
    }
   ],
   "source": [
    "#Cargamos el corpus\n",
    "\n",
    "corpus = list(cess_esp.tagged_sents())\n",
    "number_sentences = len(corpus)\n",
    "print(\"number of sentnces:\", number_sentences)\n",
    "print(\"number of words:\", number_sentences)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Procesamos el corpus\n",
    "processed_corpus = []\n",
    "for sentence in corpus:\n",
    "    tmp_sentence = []\n",
    "    for word in sentence:\n",
    "        if word[0] == \"*0*\":\n",
    "            continue\n",
    "        if word[1][0] == \"v\" or \"F\":\n",
    "            new_word = (word[0], word[1][:3])\n",
    "        else:\n",
    "            new_word = (palabra_etiquetada[0], word[1][:2])\n",
    "        tmp_sentence.append(new_word)\n",
    "    processed_corpus.append(tmp_sentence)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Shuffle data\n",
    "shuffle(corpus)\n",
    "shuffle(processed_corpus)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Tarea 1 "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "// EXplicamos la tarea aqui"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 17min 33s, sys: 1min 37s, total: 19min 11s\n",
      "Wall time: 19min 48s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "results_hmm_unprocessed = []\n",
    "intervals_hmm_unprocessed = []\n",
    "kf_fold = KFold(n_splits=10, shuffle=False)\n",
    "for train_index, test_index in kf_fold.split(corpus):\n",
    "    #Split data\n",
    "    training_cv = np.take(corpus,train_index)\n",
    "    test_cv = np.take(corpus,test_index)\n",
    "    #HMM\n",
    "    tagger_hmm = hmm.HiddenMarkovModelTagger.train(training_cv)\n",
    "    v = tagger_hmm.evaluate(test_cv)\n",
    "    results_hmm_unprocessed.append(v)\n",
    "    #Intervalos\n",
    "    d = 1.96*math.sqrt((v*(1-v))/len(test_cv))\n",
    "    ic = round(d,3)\n",
    "    intervals_hmm_unprocessed.append(ic)\n",
    "\n",
    "results_hmm_processed = []\n",
    "intervals_hmm_processed = []\n",
    "kf_fold = KFold(n_splits=10, shuffle=False)\n",
    "for train_index, test_index in kf_fold.split(processed_corpus):\n",
    "    #Split data\n",
    "    training_cv = np.take(corpus,train_index)\n",
    "    test_cv = np.take(corpus,test_index)\n",
    "    #HMM\n",
    "    tagger_hmm = hmm.HiddenMarkovModelTagger.train(training_cv)\n",
    "    v = tagger_hmm.evaluate(test_cv)\n",
    "    results_hmm_processed.append(v)\n",
    "    #Intervalos\n",
    "    d = 1.96*math.sqrt((v*(1-v))/len(test_cv))\n",
    "    ic = round(d,3)\n",
    "    intervals_hmm_processed.append(ic)\n",
    "    \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "x=[i for i in range(10)]\n",
    "y=results_hmm_unprocessed # results es una lista con los resultados de cada experimento\n",
    "plt.axis([-1, 10, 0.80, 0.97])\n",
    "plt.ylabel('Accuracy')\n",
    "plt.xlabel('Fold')\n",
    "plt.title('Ten-fold cross validation HMM unprocessed')\n",
    "plt.plot(x,y,'ro')\n",
    "Tic=intervals_hmm_unprocessed# Lista con los intervalos de confianza\n",
    "plt.errorbar(x,y,yerr=Tic,linestyle='None')\n",
    "plt.show()\n",
    "\n",
    "x=[i for i in range(10)]\n",
    "y=results_hmm_processed # results es una lista con los resultados de cada experimento\n",
    "plt.axis([-1, 10, 0.80, 0.97])\n",
    "plt.ylabel('Accuracy')\n",
    "plt.xlabel('Fold')\n",
    "plt.title('Ten-fold cross validation HMM processed')\n",
    "plt.plot(x,y,'ro')\n",
    "Tic=intervals_hmm_processed# Lista con los intervalos de confianza\n",
    "plt.errorbar(x,y,yerr=Tic,linestyle='None')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "// Comentamos resultados"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Tarea 2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "// EXplicamos la tarea aqui"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 6min 21s, sys: 17.8 s, total: 6min 38s\n",
      "Wall time: 7min\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "results_hmm_train_limited = []\n",
    "intervals_hmm_train_limited = []\n",
    "for i in np.arange(0.1, 1.0, 0.1): #We iterate a list array([0.1,  0.2,  0.3,  0.4,  0.5,  0.6,  0.7,  0.8,  0.9])\n",
    "    #Split data\n",
    "    len_training = int(i*len(processed_corpus))\n",
    "    training_notcv = processed_corpus[:len_training]\n",
    "    test_notcv = processed_corpus[len_training:]\n",
    "    #HMM\n",
    "    tagger_hmm = hmm.HiddenMarkovModelTagger.train(training_notcv)\n",
    "    v = tagger_hmm.evaluate(test_notcv)\n",
    "    results_hmm_train_limited.append(v)\n",
    "    #Intervalos\n",
    "    d = 1.96*math.sqrt((v*(1-v))/len(test_cv))\n",
    "    ic = round(d,3)\n",
    "    intervals_hmm_train_limited.append(ic)\n",
    "    \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "xticks = np.arange(10, 110, step=10)\n",
    "x=xticks[:9]\n",
    "y=results_hmm_train_limited # results es una lista con los resultados de cada experimento\n",
    "plt.axis([-1, 10, 0.80, 0.97])\n",
    "plt.xticks(xticks)\n",
    "plt.ylabel('Accuracy')\n",
    "plt.xlabel('% of data used as training')\n",
    "plt.title('HMM performance in 10% test data based on training data size')\n",
    "plt.plot(x,y,'ro')\n",
    "Tic=intervals_hmm_train_limited# Lista con los intervalos de confianza\n",
    "plt.errorbar(x,y,yerr=Tic,linestyle='None')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "// Comentamos resultados"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Tarea 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "def tr_te_tnt_smooth(tr,te,n):\n",
    "    # n: longitud del sufijo\n",
    "    # Entrenamos y evaluamos el tagger tnt con suavizado utilizando\n",
    "    # AffixTagger como etiquetador para las palabras desconocidas\n",
    "    \n",
    "    # Inicializamos y entrenamos AffixTagger\n",
    "    sufix_tagger = AffixTagger(tr, affix_length=-n)\n",
    "    # Inicializamos TnT pasando el tagger anterior como par√°metro\n",
    "    tnt_tagger = tnt.TnT(unk = sufix_tagger, Trained = True)\n",
    "    # Entrenamos TnT\n",
    "    tnt_tagger.train(tr)\n",
    "    # Evaluamos con te\n",
    "    return tnt_tagger.evaluate(te)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 10min 44s, sys: 8.4 s, total: 10min 53s\n",
      "Wall time: 13min 33s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "from nltk import AffixTagger\n",
    "results_tnt_affix_length = []\n",
    "intervals_tnt_affix_length = []\n",
    "for i in range(0, 10):\n",
    "    #Split data\n",
    "    len_training = int(0.9*len(processed_corpus))\n",
    "    training_notcv = processed_corpus[:len_training]\n",
    "    test_notcv = processed_corpus[len_training:]\n",
    "    #Mofidy data for affix\n",
    "    #TNT\n",
    "    v = tr_te_tnt_smooth(training_notcv,test_notcv,i)\n",
    "    results_tnt_affix_length.append(v)\n",
    "    #Intervalos\n",
    "    d = 1.96*math.sqrt((v*(1-v))/len(test_cv))\n",
    "    ic = round(d,3)\n",
    "    intervals_tnt_affix_length.append(ic)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "xticks = list(range(10))\n",
    "x=xticks\n",
    "y=results_tnt_affix_length # results es una lista con los resultados de cada experimento\n",
    "plt.axis([-1, 10, 0.80, 0.97])\n",
    "plt.ylabel('Accuracy')\n",
    "plt.xlabel('Suffix length')\n",
    "plt.title('Accuracy per suffix length used in TNT classifier')\n",
    "plt.plot(x,y,'ro')\n",
    "Tic=intervals_tnt_affix_length# Lista con los intervalos de confianza\n",
    "plt.errorbar(x,y,yerr=Tic,linestyle='None')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Tarea 4"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Brill"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 49.7 s, sys: 925 ms, total: 50.6 s\n",
      "Wall time: 1min 6s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "train = processed_corpus[:int(0.9*len(corpus))]\n",
    "test = processed_corpus[int(0.9*len(corpus)):]\n",
    "\n",
    "tagger_unigramas = UnigramTagger(train)\n",
    "brill.Template._cleartemplates()\n",
    "templates = brill.fntbl37()\n",
    "trainer = nltk.tag.brill_trainer.BrillTaggerTrainer(initial_tagger=tagger_unigramas,\n",
    "                                   templates=templates, trace=3,\n",
    "                                   deterministic=True)\n",
    "trainer._trace=0 #We hide the training loop prints\n",
    "brill_trained = trainer.train(train, max_rules=1000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8995891536565325"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Brill with unigramtagger\n",
    "brill_trained.evaluate(test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "tagger_unigramas = hmm.HiddenMarkovModelTagger.train(train)\n",
    "brill.Template._cleartemplates()\n",
    "templates = brill.fntbl37()\n",
    "trainer = nltk.tag.brill_trainer.BrillTaggerTrainer(initial_tagger=tagger_unigramas,\n",
    "                                   templates=templates, trace=3,\n",
    "                                   deterministic=True)\n",
    "trainer._trace=0 #We hide the training loop prints\n",
    "brill_trained = trainer.train(train, max_rules=1000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9347576006573541"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Brill with hmmtagger\n",
    "brill_trained.evaluate(test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## CRF"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9606135305395782"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tagger_crf = crf.CRFTagger()\n",
    "tagger_crf.train(train, \"model\")\n",
    "tagger_crf.evaluate(test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Perceptron"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9711859764448096"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tagger_perceptron = perceptron.PerceptronTagger(load = False)\n",
    "tagger_perceptron.train(train)\n",
    "tagger_perceptron.evaluate(test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('-', 'Fg'),\n",
       " ('Qu√©', 'pt'),\n",
       " ('pod√≠a', 'vm'),\n",
       " ('haber', 'va'),\n",
       " ('inducido', 'vm'),\n",
       " ('al', 'sp'),\n",
       " ('poeta', 'nc'),\n",
       " ('para', 'sp'),\n",
       " ('verse', 'vm'),\n",
       " ('arrastrado', 'aq'),\n",
       " ('a', 'sp'),\n",
       " ('aquel', 'dd'),\n",
       " ('descabellado', 'aq'),\n",
       " ('lance', 'nc'),\n",
       " ('?', 'Fi')]"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test[0]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# RNN Keras "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# example of training a final classification model\n",
    "from keras.models import Sequential\n",
    "from keras.layers import Dense\n",
    "from sklearn.datasets import make_blobs\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "# generate 2d classification dataset\n",
    "X_train, y_train = make_blobs(n_samples=100, centers=2, n_features=2, random_state=1)\n",
    "scalar = MinMaxScaler()\n",
    "scalar.fit(X)\n",
    "X = scalar.transform(X)\n",
    "# define and fit the final model\n",
    "model = Sequential()\n",
    "model.add(Dense(4, input_dim=2, activation='relu'))\n",
    "model.add(Dense(4, activation='relu'))\n",
    "model.add(Dense(1, activation='sigmoid'))\n",
    "model.compile(loss='binary_crossentropy', optimizer='adam')\n",
    "model.fit(X, y, epochs=200, verbose=0)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
